openapi: 3.0.3
info:
  title: Geek Budget - OpenAPI 3.0
  contact:
    email: ilya.korolev@outlook.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
tags:
  - name: user
    description: Operations for base user's data
  - name: transactions
    description: Operations for transactions
paths:
  /v1/authorize:
    post:
      tags:
        - auth
      summary: validate user/password and return token
      security: [] # Override to indicate no security required
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthData"
        required: true
      responses:
        "200":
          description: return token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "JWT token"
                required:
                  - token
        "401":
          description: Authentication failed

  /v1/user:
    get:
      tags:
        - user
      summary: return user object
      operationId: getUser
      responses:
        "200":
          description: user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /v1/accounts/{accountId}/history:
    get:
      tags:
        - accounts
      summary: return list of dates when this account was used in some transaction
      operationId: getAccountHistory
      parameters:
        - name: "accountId"
          in: "path"
          description: "ID of account"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: list of dates when this account was used in some transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHistory"

  /v1/accounts:
    get:
      tags:
        - accounts
      summary: get all accounts
      operationId: getAccounts
      responses:
        "200":
          description: accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
    post:
      tags:
        - accounts
      summary: create new account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountNoID"
      responses:
        "200":
          description: created account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

  /v1/accounts/{id}:
    get:
      tags:
        - accounts
      summary: get account
      operationId: getAccount
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the account"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
    put:
      tags:
        - accounts
      summary: update account
      operationId: updateAccount
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the account"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountNoID"
      responses:
        "200":
          description: updated account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
    delete:
      tags:
        - accounts
      summary: delete account
      operationId: deleteAccount
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the account"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body

  /v1/currencies:
    post:
      tags:
        - currencies
      summary: create new currency
      operationId: createCurrency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrencyNoID"
      responses:
        "200":
          description: created currency
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Currency"
    get:
      tags:
        - currencies
      summary: get all currencies
      operationId: getCurrencies
      responses:
        "200":
          description: currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Currency"

  /v1/currencies/{id}:
    put:
      tags:
        - currencies
      summary: update currency
      operationId: updateCurrency
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the currency"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrencyNoID"
      responses:
        "200":
          description: updated currency
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Currency"
    delete:
      tags:
        - currencies
      summary: delete currency
      operationId: deleteCurrency
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the currency"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body

  /v1/bankImporters:
    get:
      tags:
        - bank importers
      summary: get all bank importers
      operationId: getBankImporters
      responses:
        "200":
          description: bank importers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BankImporter"
    post:
      tags:
        - bank importers
      summary: create new bank importer
      operationId: createBankImporter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankImporterNoID"
      responses:
        "200":
          description: created bank importer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankImporter"

  /v1/bankImporters/{id}:
    put:
      tags:
        - bank importers
      summary: update bank importer
      operationId: updateBankImporter
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the bank importer"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankImporterNoID"
      responses:
        "200":
          description: updated bank importer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankImporter"
    delete:
      tags:
        - bank importers
      summary: delete bank importer
      operationId: deleteBankImporter
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the bankimporter"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body
  /v1/bankImporters/{id}/fetch:
    post:
      tags:
        - bank importers
      summary: fetch new transactions from bank
      operationId: fetchBankImporter
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the bank importer"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body
        "429":
          description: too many requests

  /v1/transactions:
    get:
      tags:
        - transactions
      summary: get all transactions which matches given filters
      operationId: getTransactions
      parameters:
        - name: "description"
          in: "query"
          description: "Filter by description"
          schema:
            type: "string"
        - name: amountFrom
          in: "query"
          description: "Don't return transactions with amount less than this"
          schema:
            type: "number"
            format: "double"
        - name: amountTo
          in: "query"
          description: "Don't return transactions with amount more than this"
          schema:
            type: "number"
            format: "double"
        - name: dateFrom
          in: "query"
          description: "Don't return transactions with date before this"
          schema:
            type: "string"
            format: "date-time"
        - name: dateTo
          in: "query"
          description: "Don't return transactions with date after this"
          schema:
            type: "string"
            format: "date-time"
      responses:
        "200":
          description: transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
    post:
      tags:
        - transactions
      summary: create new transaction
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionNoID"
      responses:
        "200":
          description: created transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"

  /v1/transactions/{id}:
    put:
      tags:
        - transactions
      summary: update transaction
      operationId: updateTransaction
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionNoID"
      responses:
        "200":
          description: updated transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
    get:
      tags:
        - transactions
      summary: get transaction
      operationId: getTransaction
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
    delete:
      tags:
        - transactions
      summary: delete transaction
      operationId: deleteTransaction
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body

  /v1/unprocessedTransactions:
    get:
      tags:
        - unprocessed transactions
      summary: get all unprocessed transactions
      operationId: getUnprocessedTransactions
      responses:
        "200":
          description: unprocessed transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnprocessedTransaction"

  /v1/unprocessedTransactions/{id}/convert:
    post:
      tags:
        - unprocessed transactions
      summary: convert unprocessed transactions into normal transaction
      operationId: convertUnprocessedTransaction
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionNoID"
      responses:
        "200":
          description: created transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"

  /v1/unprocessedTransactions/{id}:
    delete:
      tags:
        - unprocessed transactions
      summary: delete unprocessed transaction
      operationId: deleteUnprocessedTransaction
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
        - name: duplicateOf
          description: "ID of transaction which is duplicate of this one"
          in: query
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body

  /v1/balances:
    get:
      tags:
        - aggregations
      summary: get balance for filtered transactions
      operationId: getBalances
      parameters:
        - name: from
          in: query
          description: "Uses transactions from this date"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-01-01T00:00:00Z"
        - name: to
          in: query
          description: "Uses transactions to this date"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-01-01T00:00:00Z"
        - name: outputCurrencyId
          in: query
          description: "Converts all transactions to this currency"
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: calculated balance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aggregation"

  /v1/expenses:
    get:
      tags:
        - aggregations
      summary: get expenses for filtered transactions
      operationId: getExpenses
      parameters:
        - name: from
          in: query
          description: "Uses transactions from this date"
          schema:
            type: "string"
            format: "date-time"
        - name: to
          in: query
          description: "Uses transactions to this date"
          schema:
            type: "string"
            format: "date-time"
        - name: outputCurrencyId
          in: query
          description: "Converts all transactions to this currency"
          schema:
            type: "string"
      responses:
        "200":
          description: calculated expenses
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aggregation"

  /v1/incomes:
    get:
      tags:
        - aggregations
      summary: get incomes for filtered transactions
      operationId: getIncomes
      parameters:
        - name: from
          in: query
          description: "Uses transactions from this date"
          schema:
            type: "string"
            format: "date-time"
        - name: to
          in: query
          description: "Uses transactions to this date"
          schema:
            type: "string"
            format: "date-time"
        - name: outputCurrencyId
          in: query
          description: "Converts all transactions to this currency"
          schema:
            type: "string"
      responses:
        "200":
          description: calculated incomes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aggregation"

  /v1/notifications:
    get:
      tags:
        - notifications
      summary: return all notifications
      operationId: getNotifications
      responses:
        "200":
          description: notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
  /v1/notifications/{id}:
    delete:
      tags:
        - notifications
      summary: delete notification
      operationId: deleteNotification
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body

  /v1/matchers:
    post:
      tags:
        - matchers
      summary: create new matcher
      operationId: createMatcher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatcherNoID"
      responses:
        "200":
          description: created matcher
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Matcher"
    get:
      tags:
        - matchers
      summary: get all matchers
      operationId: getMatchers
      responses:
        "200":
          description: matchers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Matcher"

  /v1/matchers/{id}:
    put:
      tags:
        - matchers
      summary: update matcher
      operationId: updateMatcher
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the matcher"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatcherNoID"
      responses:
        "200":
          description: updated matcher
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Matcher"
    delete:
      tags:
        - matchers
      summary: delete matcher
      operationId: deleteMatcher
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the matcher"
          required: true
          schema:
            type: "string"
            format: "uuid"
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: no body
  /v1/matchers/check:
    post:
      tags:
        - matchers
      summary: check if passed matcher matches given transaction
      operationId: checkMatcher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                matcher:
                  $ref: "#/components/schemas/MatcherNoID"
                transaction:
                  $ref: "#/components/schemas/TransactionNoID"
              required:
                - matcher
                - transaction
      responses:
        "200":
          description: true/false if matcher works
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
        "400":
          description: bad request

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthData:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
      required:
        - email
        - password

    Entity:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      required:
        - id

    User:
      type: object
      properties:
        email:
          type: string
        startDate:
          type: string
          format: date-time
      required:
        - email
        - startDate
      allOf:
        - $ref: "#/components/schemas/Entity"

    BankAccountInfo:
      type: object
      properties:
        accountId:
          type: string
          example: "12345"
        bankId:
          type: string
          example: "12345"
        openingBalance:
          type: number
          format: double
          example: 1000.0
        closingBalance:
          type: number
          format: double
          example: 1000.0
    AccountNoID:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          enum:
            - expense
            - income
            - asset
        bankInfo:
          $ref: "#/components/schemas/BankAccountInfo"
      required:
        - name
        - type
    Account:
      type: object
      allOf:
        - $ref: "#/components/schemas/Entity"
        - $ref: "#/components/schemas/AccountNoID"

    Notification:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
          properties:
            date:
              type: string
              format: date-time
              example: "2020-01-01T00:00:00Z"
            type:
              enum:
                - other
                - balanceMatch
                - balanceDoesntMatch
            url:
              type: string
            title:
              type: string
            description:
              type: string
          required:
            - date
            - type
            - title
            - description

    CurrencyNoID:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    Currency:
      type: object
      allOf:
        - $ref: "#/components/schemas/Entity"
        - $ref: "#/components/schemas/CurrencyNoID"

    AccountHistory:
      type: array
      items:
        type: string
        format: date-time
        example: "2020-01-01T00:00:00Z"

    BankImporterNoID:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        accountId:
          type: string
          format: uuid
          description: >-
            ID of account which is used to store transactions from this bank importer
        extra:
          type: string
          description: >-
            Stores extra data about bank importer. For example could hold "bank account number"
            to be able to distinguish between different bank accounts, or it could hold token
            for bank API
        type:
          type: string
          description: >-
            Type of bank importer. It's used to distinguish between different banks. For example,
            FIO bank or KB bank.
        lastSuccessfulImport:
          type: string
          format: date-time
          description: >-
            Date of last successful import.
        lastImports:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
                description: >-
                  Date of import
              status:
                type: string
                description: >-
                  Status of import
      required:
        - name
        - accountId
    BankImporter:
      type: object
      allOf:
        - $ref: "#/components/schemas/Entity"
        - $ref: "#/components/schemas/BankImporterNoID"

    TransactionNoID:
      type: object
      properties:
        date:
          type: string
          format: date-time
        description:
          type: string
        place:
          type: string
        tags:
          type: array
          items:
            type: string
        partnerName:
          type: string
        partnerAccount:
          type: string
        partnerInternalId:
          type: string
          description: Internal bank's ID to be able to match later if necessary
        extra:
          type: string
          description: >-
            Stores extra data about transaction. For example could hold "variable symbol" to
            distinguish payment for the same account, but with different meaning
        unprocessedSources:
          type: string
          description: >-
            Stores FULL unprocessed transactions which was source of this transaction.
            Could be used later for detailed analysis
        externalIds:
          type: array
          items:
            type: string
          description: >-
            IDs of unprocessed transaction - to match later
        movements:
          type: array
          items:
            $ref: "#/components/schemas/Movement"
      required:
        - date
        - movements
    Transaction:
      type: object
      allOf:
        - $ref: "#/components/schemas/Entity"
        - $ref: "#/components/schemas/TransactionNoID"

    Movement:
      type: object
      properties:
        amount:
          type: number
          format: double
        currencyId:
          type: string
        accountId:
          type: string
        description:
          type: string
      required:
        - amount
        - currencyId
        - accountId

    UnprocessedTransaction:
      type: object
      properties:
        transaction:
          $ref: "#/components/schemas/Transaction"
        matched:
          type: array
          items:
            $ref: "#/components/schemas/MatcherAndTransaction"
        duplicates:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
      required:
        - transaction
        - matched
        - duplicates

    MatcherAndTransaction:
      type: object
      properties:
        matcherId:
          type: string
        transaction:
          $ref: "#/components/schemas/TransactionNoID"
      required:
        - matcherId
        - transaction

    Aggregation:
      type: object
      properties:
        from:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00Z"
        to:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00Z"
        granularity:
          type: string
          enum:
            - month
            - year
        intervals:
          type: array
          items:
            type: string
            format: date-time
            example: "2020-01-01T00:00:00Z"
        currencies:
          type: array
          items:
            $ref: "#/components/schemas/CurrencyAggregation"
      required:
        - from
        - to
        - granularity
        - intervals
        - currencies

    CurrencyAggregation:
      type: object
      properties:
        currencyId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/AccountAggregation"
      required:
        - currencyId
        - accounts

    AccountAggregation:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        amounts:
          type: array
          items:
            type: number
            format: double
      required:
        - accountId
        - amounts

    MatcherNoID:
      type: object
      properties:
        name:
          type: string
        outputDescription:
          type: string
        amount:
          type: number
          format: double
        currencyRegExp:
          type: string
        partnerNameRegExp:
          type: string
        partnerAccountNumber:
          type: string
        descriptionRegExp:
          type: string
        extraRegExp:
          type: string
        outputMovements:
          type: array
          items:
            $ref: "#/components/schemas/Movement"
      required:
        - name
    Matcher:
      type: object
      allOf:
        - $ref: "#/components/schemas/Entity"
        - $ref: "#/components/schemas/MatcherNoID"
