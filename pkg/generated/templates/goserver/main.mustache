{{>partial_header}}
package {{packageName}}

import (
	"context"
	"fmt"
	"log/slog"
	"net"
	"net/http"
	"time"
	"github.com/gorilla/mux"


	"github.com/ya-breeze/geekbudgetbe/pkg/config"
)

type CustomControllers struct {
{{#apiInfo}}{{#apis}}
	{{classname}}Service {{classname}}Service{{/apis}}
{{/apiInfo}}
}

func Serve(ctx context.Context, logger *slog.Logger, cfg *config.Config,
	controllers CustomControllers, middlewares ...mux.MiddlewareFunc) (net.Addr, chan int, error) {
	listener, err := net.Listen("tcp", fmt.Sprintf(":%d", cfg.Port))
	if err != nil {
		return nil, nil, fmt.Errorf("Failed to listen: %w", err)
	}
	logger.Info(fmt.Sprintf("Listening at port %d...", listener.Addr().(*net.TCPAddr).Port))

{{#apiInfo}}{{#apis}}
	{{classname}}Service := New{{classname}}Service()
	if controllers.{{classname}}Service != nil {
		{{classname}}Service = controllers.{{classname}}Service
	}
	{{classname}}Controller := New{{classname}}Controller({{classname}}Service)
{{/apis}}{{/apiInfo}}
	router := NewRouter({{#apiInfo}}{{#apis}}{{classname}}Controller{{^-last}}, {{/-last}}{{/apis}}{{/apiInfo}})

	router.Use(middlewares...)

	server := &http.Server{
		Handler: router,
	}

	go func() {
		server.Serve(listener)
	}()

	finishChan := make(chan int, 1)
	go func() {
		<-ctx.Done()
		logger.Info("Shutting down server...")
		timeout, _ := context.WithTimeout(context.Background(), 5*time.Second)
		server.Shutdown(timeout)
		finishChan <- 1
		logger.Info("Server stopped")
	}()

	return listener.Addr(), finishChan, nil
}
