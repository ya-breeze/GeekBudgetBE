/*
Geek Budget - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Aggregation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Aggregation{}

// Aggregation struct for Aggregation
type Aggregation struct {
	From time.Time `json:"from"`
	To time.Time `json:"to"`
	Granularity string `json:"granularity"`
	Intervals []time.Time `json:"intervals"`
	Currencies []CurrencyAggregation `json:"currencies"`
}

type _Aggregation Aggregation

// NewAggregation instantiates a new Aggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregation(from time.Time, to time.Time, granularity string, intervals []time.Time, currencies []CurrencyAggregation) *Aggregation {
	this := Aggregation{}
	this.From = from
	this.To = to
	this.Granularity = granularity
	this.Intervals = intervals
	this.Currencies = currencies
	return &this
}

// NewAggregationWithDefaults instantiates a new Aggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationWithDefaults() *Aggregation {
	this := Aggregation{}
	return &this
}

// GetFrom returns the From field value
func (o *Aggregation) GetFrom() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *Aggregation) GetFromOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *Aggregation) SetFrom(v time.Time) {
	o.From = v
}

// GetTo returns the To field value
func (o *Aggregation) GetTo() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Aggregation) GetToOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Aggregation) SetTo(v time.Time) {
	o.To = v
}

// GetGranularity returns the Granularity field value
func (o *Aggregation) GetGranularity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value
// and a boolean to check if the value has been set.
func (o *Aggregation) GetGranularityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Granularity, true
}

// SetGranularity sets field value
func (o *Aggregation) SetGranularity(v string) {
	o.Granularity = v
}

// GetIntervals returns the Intervals field value
func (o *Aggregation) GetIntervals() []time.Time {
	if o == nil {
		var ret []time.Time
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *Aggregation) GetIntervalsOk() ([]time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intervals, true
}

// SetIntervals sets field value
func (o *Aggregation) SetIntervals(v []time.Time) {
	o.Intervals = v
}

// GetCurrencies returns the Currencies field value
func (o *Aggregation) GetCurrencies() []CurrencyAggregation {
	if o == nil {
		var ret []CurrencyAggregation
		return ret
	}

	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value
// and a boolean to check if the value has been set.
func (o *Aggregation) GetCurrenciesOk() ([]CurrencyAggregation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currencies, true
}

// SetCurrencies sets field value
func (o *Aggregation) SetCurrencies(v []CurrencyAggregation) {
	o.Currencies = v
}

func (o Aggregation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Aggregation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	toSerialize["granularity"] = o.Granularity
	toSerialize["intervals"] = o.Intervals
	toSerialize["currencies"] = o.Currencies
	return toSerialize, nil
}

func (o *Aggregation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
		"granularity",
		"intervals",
		"currencies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAggregation := _Aggregation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAggregation)

	if err != nil {
		return err
	}

	*o = Aggregation(varAggregation)

	return err
}

type NullableAggregation struct {
	value *Aggregation
	isSet bool
}

func (v NullableAggregation) Get() *Aggregation {
	return v.value
}

func (v *NullableAggregation) Set(val *Aggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregation(val *Aggregation) *NullableAggregation {
	return &NullableAggregation{value: val, isSet: true}
}

func (v NullableAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


