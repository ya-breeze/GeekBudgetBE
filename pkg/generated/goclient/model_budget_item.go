/*
Geek Budget - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BudgetItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetItem{}

// BudgetItem struct for BudgetItem
type BudgetItem struct {
	Id          string    `json:"id"`
	Date        time.Time `json:"date"`
	AccountId   string    `json:"accountId"`
	Amount      float64   `json:"amount"`
	Description *string   `json:"description,omitempty"`
}

type _BudgetItem BudgetItem

// NewBudgetItem instantiates a new BudgetItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetItem(id string, date time.Time, accountId string, amount float64) *BudgetItem {
	this := BudgetItem{}
	this.Id = id
	this.Date = date
	this.AccountId = accountId
	this.Amount = amount
	return &this
}

// NewBudgetItemWithDefaults instantiates a new BudgetItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetItemWithDefaults() *BudgetItem {
	this := BudgetItem{}
	return &this
}

// GetId returns the Id field value
func (o *BudgetItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BudgetItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BudgetItem) SetId(v string) {
	o.Id = v
}

// GetDate returns the Date field value
func (o *BudgetItem) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *BudgetItem) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *BudgetItem) SetDate(v time.Time) {
	o.Date = v
}

// GetAccountId returns the AccountId field value
func (o *BudgetItem) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *BudgetItem) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *BudgetItem) SetAccountId(v string) {
	o.AccountId = v
}

// GetAmount returns the Amount field value
func (o *BudgetItem) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *BudgetItem) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *BudgetItem) SetAmount(v float64) {
	o.Amount = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BudgetItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BudgetItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BudgetItem) SetDescription(v string) {
	o.Description = &v
}

func (o BudgetItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["date"] = o.Date
	toSerialize["accountId"] = o.AccountId
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *BudgetItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"date",
		"accountId",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBudgetItem := _BudgetItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBudgetItem)

	if err != nil {
		return err
	}

	*o = BudgetItem(varBudgetItem)

	return err
}

type NullableBudgetItem struct {
	value *BudgetItem
	isSet bool
}

func (v NullableBudgetItem) Get() *BudgetItem {
	return v.value
}

func (v *NullableBudgetItem) Set(val *BudgetItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetItem(val *BudgetItem) *NullableBudgetItem {
	return &NullableBudgetItem{value: val, isSet: true}
}

func (v NullableBudgetItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
