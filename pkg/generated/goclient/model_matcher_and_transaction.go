/*
Geek Budget - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MatcherAndTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatcherAndTransaction{}

// MatcherAndTransaction struct for MatcherAndTransaction
type MatcherAndTransaction struct {
	MatcherId   string          `json:"matcherId"`
	Transaction TransactionNoID `json:"transaction"`
}

type _MatcherAndTransaction MatcherAndTransaction

// NewMatcherAndTransaction instantiates a new MatcherAndTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatcherAndTransaction(matcherId string, transaction TransactionNoID) *MatcherAndTransaction {
	this := MatcherAndTransaction{}
	this.MatcherId = matcherId
	this.Transaction = transaction
	return &this
}

// NewMatcherAndTransactionWithDefaults instantiates a new MatcherAndTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatcherAndTransactionWithDefaults() *MatcherAndTransaction {
	this := MatcherAndTransaction{}
	return &this
}

// GetMatcherId returns the MatcherId field value
func (o *MatcherAndTransaction) GetMatcherId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatcherId
}

// GetMatcherIdOk returns a tuple with the MatcherId field value
// and a boolean to check if the value has been set.
func (o *MatcherAndTransaction) GetMatcherIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatcherId, true
}

// SetMatcherId sets field value
func (o *MatcherAndTransaction) SetMatcherId(v string) {
	o.MatcherId = v
}

// GetTransaction returns the Transaction field value
func (o *MatcherAndTransaction) GetTransaction() TransactionNoID {
	if o == nil {
		var ret TransactionNoID
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *MatcherAndTransaction) GetTransactionOk() (*TransactionNoID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *MatcherAndTransaction) SetTransaction(v TransactionNoID) {
	o.Transaction = v
}

func (o MatcherAndTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatcherAndTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matcherId"] = o.MatcherId
	toSerialize["transaction"] = o.Transaction
	return toSerialize, nil
}

func (o *MatcherAndTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matcherId",
		"transaction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatcherAndTransaction := _MatcherAndTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatcherAndTransaction)

	if err != nil {
		return err
	}

	*o = MatcherAndTransaction(varMatcherAndTransaction)

	return err
}

type NullableMatcherAndTransaction struct {
	value *MatcherAndTransaction
	isSet bool
}

func (v NullableMatcherAndTransaction) Get() *MatcherAndTransaction {
	return v.value
}

func (v *NullableMatcherAndTransaction) Set(val *MatcherAndTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableMatcherAndTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableMatcherAndTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatcherAndTransaction(val *MatcherAndTransaction) *NullableMatcherAndTransaction {
	return &NullableMatcherAndTransaction{value: val, isSet: true}
}

func (v NullableMatcherAndTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatcherAndTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
