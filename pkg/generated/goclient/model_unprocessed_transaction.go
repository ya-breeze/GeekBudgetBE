/*
Geek Budget - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UnprocessedTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnprocessedTransaction{}

// UnprocessedTransaction struct for UnprocessedTransaction
type UnprocessedTransaction struct {
	Transaction Transaction             `json:"transaction"`
	Matched     []MatcherAndTransaction `json:"matched"`
	Duplicates  []Transaction           `json:"duplicates"`
}

type _UnprocessedTransaction UnprocessedTransaction

// NewUnprocessedTransaction instantiates a new UnprocessedTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnprocessedTransaction(transaction Transaction, matched []MatcherAndTransaction, duplicates []Transaction) *UnprocessedTransaction {
	this := UnprocessedTransaction{}
	this.Transaction = transaction
	this.Matched = matched
	this.Duplicates = duplicates
	return &this
}

// NewUnprocessedTransactionWithDefaults instantiates a new UnprocessedTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnprocessedTransactionWithDefaults() *UnprocessedTransaction {
	this := UnprocessedTransaction{}
	return &this
}

// GetTransaction returns the Transaction field value
func (o *UnprocessedTransaction) GetTransaction() Transaction {
	if o == nil {
		var ret Transaction
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *UnprocessedTransaction) GetTransactionOk() (*Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *UnprocessedTransaction) SetTransaction(v Transaction) {
	o.Transaction = v
}

// GetMatched returns the Matched field value
func (o *UnprocessedTransaction) GetMatched() []MatcherAndTransaction {
	if o == nil {
		var ret []MatcherAndTransaction
		return ret
	}

	return o.Matched
}

// GetMatchedOk returns a tuple with the Matched field value
// and a boolean to check if the value has been set.
func (o *UnprocessedTransaction) GetMatchedOk() ([]MatcherAndTransaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matched, true
}

// SetMatched sets field value
func (o *UnprocessedTransaction) SetMatched(v []MatcherAndTransaction) {
	o.Matched = v
}

// GetDuplicates returns the Duplicates field value
func (o *UnprocessedTransaction) GetDuplicates() []Transaction {
	if o == nil {
		var ret []Transaction
		return ret
	}

	return o.Duplicates
}

// GetDuplicatesOk returns a tuple with the Duplicates field value
// and a boolean to check if the value has been set.
func (o *UnprocessedTransaction) GetDuplicatesOk() ([]Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duplicates, true
}

// SetDuplicates sets field value
func (o *UnprocessedTransaction) SetDuplicates(v []Transaction) {
	o.Duplicates = v
}

func (o UnprocessedTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnprocessedTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction"] = o.Transaction
	toSerialize["matched"] = o.Matched
	toSerialize["duplicates"] = o.Duplicates
	return toSerialize, nil
}

func (o *UnprocessedTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction",
		"matched",
		"duplicates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnprocessedTransaction := _UnprocessedTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnprocessedTransaction)

	if err != nil {
		return err
	}

	*o = UnprocessedTransaction(varUnprocessedTransaction)

	return err
}

type NullableUnprocessedTransaction struct {
	value *UnprocessedTransaction
	isSet bool
}

func (v NullableUnprocessedTransaction) Get() *UnprocessedTransaction {
	return v.value
}

func (v *NullableUnprocessedTransaction) Set(val *UnprocessedTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableUnprocessedTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableUnprocessedTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnprocessedTransaction(val *UnprocessedTransaction) *NullableUnprocessedTransaction {
	return &NullableUnprocessedTransaction{value: val, isSet: true}
}

func (v NullableUnprocessedTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnprocessedTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
