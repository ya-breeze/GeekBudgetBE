// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"net/http"
	"strings"
	"time"
)

// AggregationsAPIController binds http requests to an api service and writes the service results to the http response
type AggregationsAPIController struct {
	service      AggregationsAPIServicer
	errorHandler ErrorHandler
}

// AggregationsAPIOption for how the controller is set up.
type AggregationsAPIOption func(*AggregationsAPIController)

// WithAggregationsAPIErrorHandler inject ErrorHandler into controller
func WithAggregationsAPIErrorHandler(h ErrorHandler) AggregationsAPIOption {
	return func(c *AggregationsAPIController) {
		c.errorHandler = h
	}
}

// NewAggregationsAPIController creates a default api controller
func NewAggregationsAPIController(s AggregationsAPIServicer, opts ...AggregationsAPIOption) *AggregationsAPIController {
	controller := &AggregationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AggregationsAPIController
func (c *AggregationsAPIController) Routes() Routes {
	return Routes{
		"GetBalances": Route{
			strings.ToUpper("Get"),
			"/v1/balances",
			c.GetBalances,
		},
		"GetExpenses": Route{
			strings.ToUpper("Get"),
			"/v1/expenses",
			c.GetExpenses,
		},
		"GetIncomes": Route{
			strings.ToUpper("Get"),
			"/v1/incomes",
			c.GetIncomes,
		},
	}
}

// GetBalances - get balance for filtered transactions
func (c *AggregationsAPIController) GetBalances(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var fromParam time.Time
	if query.Has("from") {
		param, err := parseTime(query.Get("from"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "from", Err: err}, nil)
			return
		}

		fromParam = param
	} else {
	}
	var toParam time.Time
	if query.Has("to") {
		param, err := parseTime(query.Get("to"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "to", Err: err}, nil)
			return
		}

		toParam = param
	} else {
	}
	var outputCurrencyIDParam string
	if query.Has("outputCurrencyID") {
		param := query.Get("outputCurrencyID")

		outputCurrencyIDParam = param
	} else {
	}
	result, err := c.service.GetBalances(r.Context(), fromParam, toParam, outputCurrencyIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExpenses - get expenses for filtered transactions
func (c *AggregationsAPIController) GetExpenses(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var fromParam time.Time
	if query.Has("from") {
		param, err := parseTime(query.Get("from"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "from", Err: err}, nil)
			return
		}

		fromParam = param
	} else {
	}
	var toParam time.Time
	if query.Has("to") {
		param, err := parseTime(query.Get("to"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "to", Err: err}, nil)
			return
		}

		toParam = param
	} else {
	}
	var outputCurrencyIDParam string
	if query.Has("outputCurrencyID") {
		param := query.Get("outputCurrencyID")

		outputCurrencyIDParam = param
	} else {
	}
	result, err := c.service.GetExpenses(r.Context(), fromParam, toParam, outputCurrencyIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIncomes - get incomes for filtered transactions
func (c *AggregationsAPIController) GetIncomes(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var fromParam time.Time
	if query.Has("from") {
		param, err := parseTime(query.Get("from"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "from", Err: err}, nil)
			return
		}

		fromParam = param
	} else {
	}
	var toParam time.Time
	if query.Has("to") {
		param, err := parseTime(query.Get("to"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "to", Err: err}, nil)
			return
		}

		toParam = param
	} else {
	}
	var outputCurrencyIDParam string
	if query.Has("outputCurrencyID") {
		param := query.Get("outputCurrencyID")

		outputCurrencyIDParam = param
	} else {
	}
	result, err := c.service.GetIncomes(r.Context(), fromParam, toParam, outputCurrencyIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
