// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UnprocessedTransactionsAPIController binds http requests to an api service and writes the service results to the http response
type UnprocessedTransactionsAPIController struct {
	service      UnprocessedTransactionsAPIServicer
	errorHandler ErrorHandler
}

// UnprocessedTransactionsAPIOption for how the controller is set up.
type UnprocessedTransactionsAPIOption func(*UnprocessedTransactionsAPIController)

// WithUnprocessedTransactionsAPIErrorHandler inject ErrorHandler into controller
func WithUnprocessedTransactionsAPIErrorHandler(h ErrorHandler) UnprocessedTransactionsAPIOption {
	return func(c *UnprocessedTransactionsAPIController) {
		c.errorHandler = h
	}
}

// NewUnprocessedTransactionsAPIController creates a default api controller
func NewUnprocessedTransactionsAPIController(s UnprocessedTransactionsAPIServicer, opts ...UnprocessedTransactionsAPIOption) *UnprocessedTransactionsAPIController {
	controller := &UnprocessedTransactionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UnprocessedTransactionsAPIController
func (c *UnprocessedTransactionsAPIController) Routes() Routes {
	return Routes{
		"ConvertUnprocessedTransaction": Route{
			strings.ToUpper("Post"),
			"/v1/unprocessedTransactions/{id}/convert",
			c.ConvertUnprocessedTransaction,
		},
		"DeleteUnprocessedTransaction": Route{
			strings.ToUpper("Delete"),
			"/v1/unprocessedTransactions/{id}",
			c.DeleteUnprocessedTransaction,
		},
		"GetUnprocessedTransactions": Route{
			strings.ToUpper("Get"),
			"/v1/unprocessedTransactions",
			c.GetUnprocessedTransactions,
		},
	}
}

// ConvertUnprocessedTransaction - convert unprocessed transactions into normal transaction
func (c *UnprocessedTransactionsAPIController) ConvertUnprocessedTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	transactionNoIdParam := TransactionNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&transactionNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTransactionNoIdRequired(transactionNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTransactionNoIdConstraints(transactionNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConvertUnprocessedTransaction(r.Context(), idParam, transactionNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUnprocessedTransaction - delete unprocessed transaction
func (c *UnprocessedTransactionsAPIController) DeleteUnprocessedTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var duplicateOfParam string
	if query.Has("duplicateOf") {
		param := query.Get("duplicateOf")

		duplicateOfParam = param
	} else {
	}
	result, err := c.service.DeleteUnprocessedTransaction(r.Context(), idParam, duplicateOfParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUnprocessedTransactions - get all unprocessed transactions
func (c *UnprocessedTransactionsAPIController) GetUnprocessedTransactions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUnprocessedTransactions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
