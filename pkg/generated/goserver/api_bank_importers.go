// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BankImportersAPIController binds http requests to an api service and writes the service results to the http response
type BankImportersAPIController struct {
	service      BankImportersAPIServicer
	errorHandler ErrorHandler
}

// BankImportersAPIOption for how the controller is set up.
type BankImportersAPIOption func(*BankImportersAPIController)

// WithBankImportersAPIErrorHandler inject ErrorHandler into controller
func WithBankImportersAPIErrorHandler(h ErrorHandler) BankImportersAPIOption {
	return func(c *BankImportersAPIController) {
		c.errorHandler = h
	}
}

// NewBankImportersAPIController creates a default api controller
func NewBankImportersAPIController(s BankImportersAPIServicer, opts ...BankImportersAPIOption) *BankImportersAPIController {
	controller := &BankImportersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BankImportersAPIController
func (c *BankImportersAPIController) Routes() Routes {
	return Routes{
		"CreateBankImporter": Route{
			strings.ToUpper("Post"),
			"/v1/bankImporters",
			c.CreateBankImporter,
		},
		"DeleteBankImporter": Route{
			strings.ToUpper("Delete"),
			"/v1/bankImporters/{id}",
			c.DeleteBankImporter,
		},
		"FetchBankImporter": Route{
			strings.ToUpper("Post"),
			"/v1/bankImporters/{id}/fetch",
			c.FetchBankImporter,
		},
		"GetBankImporters": Route{
			strings.ToUpper("Get"),
			"/v1/bankImporters",
			c.GetBankImporters,
		},
		"UpdateBankImporter": Route{
			strings.ToUpper("Put"),
			"/v1/bankImporters/{id}",
			c.UpdateBankImporter,
		},
	}
}

// CreateBankImporter - create new bank importer
func (c *BankImportersAPIController) CreateBankImporter(w http.ResponseWriter, r *http.Request) {
	bankImporterNoIdParam := BankImporterNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bankImporterNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBankImporterNoIdRequired(bankImporterNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBankImporterNoIdConstraints(bankImporterNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateBankImporter(r.Context(), bankImporterNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteBankImporter - delete bank importer
func (c *BankImportersAPIController) DeleteBankImporter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteBankImporter(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FetchBankImporter - fetch new transactions from bank
func (c *BankImportersAPIController) FetchBankImporter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.FetchBankImporter(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBankImporters - get all bank importers
func (c *BankImportersAPIController) GetBankImporters(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBankImporters(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateBankImporter - update bank importer
func (c *BankImportersAPIController) UpdateBankImporter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	bankImporterNoIdParam := BankImporterNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bankImporterNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBankImporterNoIdRequired(bankImporterNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBankImporterNoIdConstraints(bankImporterNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateBankImporter(r.Context(), idParam, bankImporterNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
