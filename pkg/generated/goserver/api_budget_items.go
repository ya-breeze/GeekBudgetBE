// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BudgetItemsAPIController binds http requests to an api service and writes the service results to the http response
type BudgetItemsAPIController struct {
	service      BudgetItemsAPIServicer
	errorHandler ErrorHandler
}

// BudgetItemsAPIOption for how the controller is set up.
type BudgetItemsAPIOption func(*BudgetItemsAPIController)

// WithBudgetItemsAPIErrorHandler inject ErrorHandler into controller
func WithBudgetItemsAPIErrorHandler(h ErrorHandler) BudgetItemsAPIOption {
	return func(c *BudgetItemsAPIController) {
		c.errorHandler = h
	}
}

// NewBudgetItemsAPIController creates a default api controller
func NewBudgetItemsAPIController(s BudgetItemsAPIServicer, opts ...BudgetItemsAPIOption) *BudgetItemsAPIController {
	controller := &BudgetItemsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BudgetItemsAPIController
func (c *BudgetItemsAPIController) Routes() Routes {
	return Routes{
		"GetBudgetItems": Route{
			strings.ToUpper("Get"),
			"/v1/budgetItems",
			c.GetBudgetItems,
		},
		"CreateBudgetItem": Route{
			strings.ToUpper("Post"),
			"/v1/budgetItems",
			c.CreateBudgetItem,
		},
		"GetBudgetItem": Route{
			strings.ToUpper("Get"),
			"/v1/budgetItems/{id}",
			c.GetBudgetItem,
		},
		"UpdateBudgetItem": Route{
			strings.ToUpper("Put"),
			"/v1/budgetItems/{id}",
			c.UpdateBudgetItem,
		},
		"DeleteBudgetItem": Route{
			strings.ToUpper("Delete"),
			"/v1/budgetItems/{id}",
			c.DeleteBudgetItem,
		},
	}
}

// GetBudgetItems - get all budgetItems
func (c *BudgetItemsAPIController) GetBudgetItems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBudgetItems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateBudgetItem - create new budgetItem
func (c *BudgetItemsAPIController) CreateBudgetItem(w http.ResponseWriter, r *http.Request) {
	budgetItemNoIdParam := BudgetItemNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&budgetItemNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBudgetItemNoIdRequired(budgetItemNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBudgetItemNoIdConstraints(budgetItemNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateBudgetItem(r.Context(), budgetItemNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBudgetItem - get budgetItem
func (c *BudgetItemsAPIController) GetBudgetItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetBudgetItem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateBudgetItem - update budgetItem
func (c *BudgetItemsAPIController) UpdateBudgetItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	budgetItemNoIdParam := BudgetItemNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&budgetItemNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBudgetItemNoIdRequired(budgetItemNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBudgetItemNoIdConstraints(budgetItemNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateBudgetItem(r.Context(), idParam, budgetItemNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteBudgetItem - delete budgetItem
func (c *BudgetItemsAPIController) DeleteBudgetItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteBudgetItem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
