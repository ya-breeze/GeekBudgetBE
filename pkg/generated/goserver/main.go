// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"context"
	"fmt"
	"net"
	"net/http"
	"time"
	"log/slog"

	"github.com/ya-breeze/geekbudgetbe/pkg/config"
)

func Serve(ctx context.Context, logger *slog.Logger, cfg *config.Config) (net.Addr, chan int, error) {
	listener, err := net.Listen("tcp", fmt.Sprintf(":%d", cfg.Port))
	if err != nil {
		return nil, nil, fmt.Errorf("Failed to listen: %w", err)
	}		
	logger.Info(fmt.Sprintf("Listening at port %d...", listener.Addr().(*net.TCPAddr).Port))

	AccountsAPIService := NewAccountsAPIService()
	AccountsAPIController := NewAccountsAPIController(AccountsAPIService)

	AggregationsAPIService := NewAggregationsAPIService()
	AggregationsAPIController := NewAggregationsAPIController(AggregationsAPIService)

	AuthAPIService := NewAuthAPIService()
	AuthAPIController := NewAuthAPIController(AuthAPIService)

	BankImportersAPIService := NewBankImportersAPIService()
	BankImportersAPIController := NewBankImportersAPIController(BankImportersAPIService)

	CurrenciesAPIService := NewCurrenciesAPIService()
	CurrenciesAPIController := NewCurrenciesAPIController(CurrenciesAPIService)

	MatchersAPIService := NewMatchersAPIService()
	MatchersAPIController := NewMatchersAPIController(MatchersAPIService)

	NotificationsAPIService := NewNotificationsAPIService()
	NotificationsAPIController := NewNotificationsAPIController(NotificationsAPIService)

	TransactionsAPIService := NewTransactionsAPIService()
	TransactionsAPIController := NewTransactionsAPIController(TransactionsAPIService)

	UnprocessedTransactionsAPIService := NewUnprocessedTransactionsAPIService()
	UnprocessedTransactionsAPIController := NewUnprocessedTransactionsAPIController(UnprocessedTransactionsAPIService)

	UserAPIService := NewUserAPIService()
	UserAPIController := NewUserAPIController(UserAPIService)

	router := NewRouter(AccountsAPIController, AggregationsAPIController, AuthAPIController, BankImportersAPIController, CurrenciesAPIController, MatchersAPIController, NotificationsAPIController, TransactionsAPIController, UnprocessedTransactionsAPIController, UserAPIController)

	server := &http.Server{
		Handler: router,
	}

	go func() {
		server.Serve(listener)
	}()

	finishChan := make(chan int, 1)
	go func() {
		<-ctx.Done()
		logger.Info("Shutting down server...")
		timeout, _ := context.WithTimeout(context.Background(), 5*time.Second)
		server.Shutdown(timeout)
		finishChan <- 1
		logger.Info("Server stopped")
	}()

	return listener.Addr(), finishChan, nil
}
