// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AuthAPIController binds http requests to an api service and writes the service results to the http response
type AuthAPIController struct {
	service AuthAPIServicer
	errorHandler ErrorHandler
}

// AuthAPIOption for how the controller is set up.
type AuthAPIOption func(*AuthAPIController)

// WithAuthAPIErrorHandler inject ErrorHandler into controller
func WithAuthAPIErrorHandler(h ErrorHandler) AuthAPIOption {
	return func(c *AuthAPIController) {
		c.errorHandler = h
	}
}

// NewAuthAPIController creates a default api controller
func NewAuthAPIController(s AuthAPIServicer, opts ...AuthAPIOption) *AuthAPIController {
	controller := &AuthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthAPIController
func (c *AuthAPIController) Routes() Routes {
	return Routes{
		"Authorize": Route{
			strings.ToUpper("Post"),
			"/v1/authorize",
			c.Authorize,
		},
	}
}

// Authorize - validate user/password and return token
func (c *AuthAPIController) Authorize(w http.ResponseWriter, r *http.Request) {
	authDataParam := AuthData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&authDataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAuthDataRequired(authDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAuthDataConstraints(authDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Authorize(r.Context(), authDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
