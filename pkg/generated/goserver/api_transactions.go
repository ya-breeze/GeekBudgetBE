// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// TransactionsAPIController binds http requests to an api service and writes the service results to the http response
type TransactionsAPIController struct {
	service      TransactionsAPIServicer
	errorHandler ErrorHandler
}

// TransactionsAPIOption for how the controller is set up.
type TransactionsAPIOption func(*TransactionsAPIController)

// WithTransactionsAPIErrorHandler inject ErrorHandler into controller
func WithTransactionsAPIErrorHandler(h ErrorHandler) TransactionsAPIOption {
	return func(c *TransactionsAPIController) {
		c.errorHandler = h
	}
}

// NewTransactionsAPIController creates a default api controller
func NewTransactionsAPIController(s TransactionsAPIServicer, opts ...TransactionsAPIOption) *TransactionsAPIController {
	controller := &TransactionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TransactionsAPIController
func (c *TransactionsAPIController) Routes() Routes {
	return Routes{
		"CreateTransaction": Route{
			strings.ToUpper("Post"),
			"/v1/transactions",
			c.CreateTransaction,
		},
		"DeleteTransaction": Route{
			strings.ToUpper("Delete"),
			"/v1/transactions/{id}",
			c.DeleteTransaction,
		},
		"GetTransaction": Route{
			strings.ToUpper("Get"),
			"/v1/transactions/{id}",
			c.GetTransaction,
		},
		"GetTransactions": Route{
			strings.ToUpper("Get"),
			"/v1/transactions",
			c.GetTransactions,
		},
		"UpdateTransaction": Route{
			strings.ToUpper("Put"),
			"/v1/transactions/{id}",
			c.UpdateTransaction,
		},
	}
}

// CreateTransaction - create new transaction
func (c *TransactionsAPIController) CreateTransaction(w http.ResponseWriter, r *http.Request) {
	transactionNoIdParam := TransactionNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&transactionNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTransactionNoIdRequired(transactionNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTransactionNoIdConstraints(transactionNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTransaction(r.Context(), transactionNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTransaction - delete transaction
func (c *TransactionsAPIController) DeleteTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteTransaction(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransaction - get transaction
func (c *TransactionsAPIController) GetTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetTransaction(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransactions - get all transactions which matches given filters
func (c *TransactionsAPIController) GetTransactions(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var descriptionParam string
	if query.Has("description") {
		param := query.Get("description")

		descriptionParam = param
	} else {
	}
	var amountFromParam float64
	if query.Has("amountFrom") {
		param, err := parseNumericParameter[float64](
			query.Get("amountFrom"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "amountFrom", Err: err}, nil)
			return
		}

		amountFromParam = param
	} else {
	}
	var amountToParam float64
	if query.Has("amountTo") {
		param, err := parseNumericParameter[float64](
			query.Get("amountTo"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "amountTo", Err: err}, nil)
			return
		}

		amountToParam = param
	} else {
	}
	var dateFromParam time.Time
	if query.Has("dateFrom") {
		param, err := parseTime(query.Get("dateFrom"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "dateFrom", Err: err}, nil)
			return
		}

		dateFromParam = param
	} else {
	}
	var dateToParam time.Time
	if query.Has("dateTo") {
		param, err := parseTime(query.Get("dateTo"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "dateTo", Err: err}, nil)
			return
		}

		dateToParam = param
	} else {
	}
	result, err := c.service.GetTransactions(r.Context(), descriptionParam, amountFromParam, amountToParam, dateFromParam, dateToParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTransaction - update transaction
func (c *TransactionsAPIController) UpdateTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	transactionNoIdParam := TransactionNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&transactionNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTransactionNoIdRequired(transactionNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTransactionNoIdConstraints(transactionNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTransaction(r.Context(), idParam, transactionNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
