// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"net/http"
	"strings"
)

// ExportAPIController binds http requests to an api service and writes the service results to the http response
type ExportAPIController struct {
	service      ExportAPIServicer
	errorHandler ErrorHandler
}

// ExportAPIOption for how the controller is set up.
type ExportAPIOption func(*ExportAPIController)

// WithExportAPIErrorHandler inject ErrorHandler into controller
func WithExportAPIErrorHandler(h ErrorHandler) ExportAPIOption {
	return func(c *ExportAPIController) {
		c.errorHandler = h
	}
}

// NewExportAPIController creates a default api controller
func NewExportAPIController(s ExportAPIServicer, opts ...ExportAPIOption) *ExportAPIController {
	controller := &ExportAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ExportAPIController
func (c *ExportAPIController) Routes() Routes {
	return Routes{
		"Export": Route{
			strings.ToUpper("Post"),
			"/v1/export",
			c.Export,
		},
	}
}

// Export - Download full user's data
func (c *ExportAPIController) Export(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Export(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
