// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// ImportAPIController binds http requests to an api service and writes the service results to the http response
type ImportAPIController struct {
	service      ImportAPIServicer
	errorHandler ErrorHandler
}

// ImportAPIOption for how the controller is set up.
type ImportAPIOption func(*ImportAPIController)

// WithImportAPIErrorHandler inject ErrorHandler into controller
func WithImportAPIErrorHandler(h ErrorHandler) ImportAPIOption {
	return func(c *ImportAPIController) {
		c.errorHandler = h
	}
}

// NewImportAPIController creates a default api controller
func NewImportAPIController(s ImportAPIServicer, opts ...ImportAPIOption) *ImportAPIController {
	controller := &ImportAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ImportAPIController
func (c *ImportAPIController) Routes() Routes {
	return Routes{
		"CallImport": Route{
			strings.ToUpper("Post"),
			"/v1/import",
			c.CallImport,
		},
	}
}

// CallImport - Upload and import full user's data
func (c *ImportAPIController) CallImport(w http.ResponseWriter, r *http.Request) {
	wholeUserDataParam := WholeUserData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&wholeUserDataParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWholeUserDataRequired(wholeUserDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWholeUserDataConstraints(wholeUserDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CallImport(r.Context(), wholeUserDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
