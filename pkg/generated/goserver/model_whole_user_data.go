// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

type WholeUserData struct {
	User User `json:"user,omitempty"`

	Currencies []Currency `json:"currencies,omitempty"`

	Accounts []Account `json:"accounts,omitempty"`

	Transactions []Transaction `json:"transactions,omitempty"`

	Matchers []Matcher `json:"matchers,omitempty"`

	BankImporters []BankImporter `json:"bankImporters,omitempty"`
}

type WholeUserDataInterface interface {
	GetUser() User
	GetCurrencies() []Currency
	GetAccounts() []Account
	GetTransactions() []Transaction
	GetMatchers() []Matcher
	GetBankImporters() []BankImporter
}

func (c *WholeUserData) GetUser() User {
	return c.User
}
func (c *WholeUserData) GetCurrencies() []Currency {
	return c.Currencies
}
func (c *WholeUserData) GetAccounts() []Account {
	return c.Accounts
}
func (c *WholeUserData) GetTransactions() []Transaction {
	return c.Transactions
}
func (c *WholeUserData) GetMatchers() []Matcher {
	return c.Matchers
}
func (c *WholeUserData) GetBankImporters() []BankImporter {
	return c.BankImporters
}

// AssertWholeUserDataRequired checks if the required fields are not zero-ed
func AssertWholeUserDataRequired(obj WholeUserData) error {
	if err := AssertUserRequired(obj.User); err != nil {
		return err
	}
	for _, el := range obj.Currencies {
		if err := AssertCurrencyRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Accounts {
		if err := AssertAccountRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Transactions {
		if err := AssertTransactionRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Matchers {
		if err := AssertMatcherRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BankImporters {
		if err := AssertBankImporterRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertWholeUserDataConstraints checks if the values respects the defined constraints
func AssertWholeUserDataConstraints(obj WholeUserData) error {
	if err := AssertUserConstraints(obj.User); err != nil {
		return err
	}
	for _, el := range obj.Currencies {
		if err := AssertCurrencyConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Accounts {
		if err := AssertAccountConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Transactions {
		if err := AssertTransactionConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Matchers {
		if err := AssertMatcherConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.BankImporters {
		if err := AssertBankImporterConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
