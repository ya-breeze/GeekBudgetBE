// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AccountsAPIController binds http requests to an api service and writes the service results to the http response
type AccountsAPIController struct {
	service AccountsAPIServicer
	errorHandler ErrorHandler
}

// AccountsAPIOption for how the controller is set up.
type AccountsAPIOption func(*AccountsAPIController)

// WithAccountsAPIErrorHandler inject ErrorHandler into controller
func WithAccountsAPIErrorHandler(h ErrorHandler) AccountsAPIOption {
	return func(c *AccountsAPIController) {
		c.errorHandler = h
	}
}

// NewAccountsAPIController creates a default api controller
func NewAccountsAPIController(s AccountsAPIServicer, opts ...AccountsAPIOption) *AccountsAPIController {
	controller := &AccountsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AccountsAPIController
func (c *AccountsAPIController) Routes() Routes {
	return Routes{
		"CreateAccount": Route{
			strings.ToUpper("Post"),
			"/v1/accounts",
			c.CreateAccount,
		},
		"DeleteAccount": Route{
			strings.ToUpper("Delete"),
			"/v1/accounts/{id}",
			c.DeleteAccount,
		},
		"GetAccountHistory": Route{
			strings.ToUpper("Get"),
			"/v1/accounts/{accountId}/history",
			c.GetAccountHistory,
		},
		"UpdateAccount": Route{
			strings.ToUpper("Put"),
			"/v1/accounts/{id}",
			c.UpdateAccount,
		},
	}
}

// CreateAccount - create new account
func (c *AccountsAPIController) CreateAccount(w http.ResponseWriter, r *http.Request) {
	accountNoIdParam := AccountNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&accountNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountNoIdRequired(accountNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAccountNoIdConstraints(accountNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAccount(r.Context(), accountNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAccount - delete account
func (c *AccountsAPIController) DeleteAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteAccount(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAccountHistory - return list of dates when this account was used in some transaction
func (c *AccountsAPIController) GetAccountHistory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	result, err := c.service.GetAccountHistory(r.Context(), accountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAccount - update account
func (c *AccountsAPIController) UpdateAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	accountNoIdParam := AccountNoId{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&accountNoIdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountNoIdRequired(accountNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAccountNoIdConstraints(accountNoIdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAccount(r.Context(), idParam, accountNoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
