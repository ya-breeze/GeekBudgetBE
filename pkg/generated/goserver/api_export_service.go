// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Geek Budget - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"context"
	"errors"
	"net/http"
)

// ExportAPIService is an interface that defines the logic for the ExportAPIServicer
type ExportAPIService interface {
	// Export - Download full user&#39;s data
	Export(ctx context.Context) (ImplResponse, error)
}

// ExportAPIService is a service that implements the logic for the ExportAPIServicer
// This service should implement the business logic for every endpoint for the ExportAPI API.
// Include any external packages or services that will be required by this service.
type ExportAPIServiceImpl struct {
}

// NewExportAPIService creates a default api service
func NewExportAPIService() ExportAPIService {
	return &ExportAPIServiceImpl{}
}

// Export - Download full user&#39;s data
func (s *ExportAPIServiceImpl) Export(ctx context.Context) (ImplResponse, error) {
	// TODO - update Export with the required logic for this service method.
	// Add api_export_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WholeUserData{}) or use other options such as http.Ok ...
	// return Response(200, WholeUserData{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("Export method not implemented")
}
